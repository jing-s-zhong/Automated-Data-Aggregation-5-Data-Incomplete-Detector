// CALL DATA_AGGREGATOR('BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_LOADING', 0);
//
CREATE OR REPLACE VIEW BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_BUCKET
AS
SELECT WIDTH_BUCKET(DAY_SRQUENCE, -2, -3*7-2, 3)::NUMBER SEGMENT_ID
    ,(DAY_SRQUENCE+2)%7-1::NUMBER DAYSHIFT_ID
    ,*
FROM (
  SELECT DATEDIFF(DAY, CURRENT_DATE(), DATA_DATE) DAY_SRQUENCE, *
  FROM BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_LOADING
  WHERE DATA_DATE < CURRENT_DATE()
  --ORDER BY DATA_DATE DESC
  --LIMIT 1000
  )
;
SELECT MIN(DATA_DATE),MAX(DATA_DATE) FROM BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_BUCKET; 
--DELETE FROM BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_LOADING WHERE DATA_DATE IN ('2020-06-10');
--
SELECT SEGMENT_ID,DATA_DATE,COUNT(*) CNT,SUM(SPEND) SPEND 
FROM BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_BUCKET 
WHERE SEGMENT_ID IN (0,1,2,3)
GROUP BY SEGMENT_ID,DATA_DATE 
ORDER BY SEGMENT_ID,DATA_DATE DESC 
LIMIT 100;
//
// DELETE FROM BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_LOADING WHERE DATA_DATE IN ('2020-06-01','2020-06-06');
//
CREATE OR REPLACE VIEW MOVING_AVG3
AS
WITH SCOPED AS (
    SELECT SEGMENT_ID
      --,PRODUCT_LINE_ID
      ,NETWORK_ID
      ,ACCOUNT_ID
      ,DAYSHIFT_ID
      ,DATA_DATE
      ,SUM(SPEND) SPEND
    FROM BI_TEST._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTOR_BUCKET
    WHERE SEGMENT_ID IN (0,1,2)
    GROUP BY SEGMENT_ID
      --,PRODUCT_LINE_ID
      ,NETWORK_ID
      ,ACCOUNT_ID
      ,DAYSHIFT_ID
      ,DATA_DATE
    )
  ,FULL_MAP AS (
    SELECT *
    FROM (SELECT 0 SEGMENT_ID, 0 DAYSHIFT_ID, CURRENT_DATE()-1 DATA_DATE, CURRENT_DATE()-4 SCOPE_BEGIN, CURRENT_DATE()-2 SCOPE_END 
          UNION ALL
          SELECT SEGMENT_ID, DAYSHIFT_ID, DATA_DATE, DATEADD(DAY, -3, DATA_DATE) SCOPE_BEGIN, DATEADD(DAY, -1, DATA_DATE) SCOPE_END 
          FROM SCOPED 
          WHERE SEGMENT_ID IN (1) 
          GROUP BY SEGMENT_ID, DAYSHIFT_ID, DATA_DATE
         ) D
        --,(SELECT DISTINCT PRODUCT_LINE_ID FROM SCOPED WHERE SEGMENT_ID IN (0,1)) P
        ,(SELECT NETWORK_ID, ACCOUNT_ID FROM SCOPED WHERE SEGMENT_ID IN (0,1) GROUP BY NETWORK_ID, ACCOUNT_ID) A
    )
  ,SLIDING_AVG AS (
    SELECT A.SEGMENT_ID
      --,A.PRODUCT_LINE_ID
      ,A.NETWORK_ID
      ,A.ACCOUNT_ID
      ,A.DAYSHIFT_ID
      ,A.DATA_DATE
      ,COUNT(*) CNT0
      ,COUNT(B.SPEND) CNT1
      ,COALESCE(SUM(B.SPEND)/NULLIF(COUNT(*),0),0) SPEND
    FROM FULL_MAP A
    LEFT JOIN (
      SELECT *
      FROM SCOPED
      --WHERE SEGMENT_ID != 0
      ) B
    ON B.DATA_DATE BETWEEN A.SCOPE_BEGIN AND A.SCOPE_END
      --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
      AND A.NETWORK_ID = B.NETWORK_ID
      AND A.ACCOUNT_ID = B.ACCOUNT_ID
    GROUP BY A.SEGMENT_ID
      --,A.PRODUCT_LINE_ID
      ,A.NETWORK_ID
      ,A.ACCOUNT_ID
      ,A.DAYSHIFT_ID
      ,A.DATA_DATE
    )
  ,DIFFERENCE AS (
    SELECT A.DATA_DATE
        ,A.DAYSHIFT_ID
        ,A.SEGMENT_ID
        --,A.PRODUCT_LINE_ID
        ,A.NETWORK_ID
        ,A.ACCOUNT_ID
        ,A.SPEND PREDICTION_SPEND
        ,COALESCE(B.SPEND,0) ACTUAL_SPEND
        --,ROUND(100*((B.SLOPE * A.DAYSHIFT_ID + B.INTERCEPT - A.SPEND)/NULLIF(A.SPEND,0)),2) DIFF 
    FROM SLIDING_AVG A 
    LEFT JOIN SCOPED B 
    ON A.DATA_DATE = B.DATA_DATE
    --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
    AND A.NETWORK_ID = B.NETWORK_ID
    AND A.ACCOUNT_ID = B.ACCOUNT_ID
    WHERE A.SEGMENT_ID < 2
    --ORDER BY ACCOUNT_ID, DAYSHIFT_ID, ABS(DIFF) DESC
   )
SELECT *
    ,ROUND(ACTUAL_SPEND - PREDICTION_SPEND,2) DIFF_AMOUNT
    ,ROUND(100*((ACTUAL_SPEND - PREDICTION_SPEND)/NULLIF(PREDICTION_SPEND,0)),2) DIFF_PERCENTAGE
FROM DIFFERENCE
--WHERE SEGMENT_ID = 0
--ORDER BY ABS(DIFF) DESC
;

SELECT *
FROM BI_TEST._CONTROL_LOGIC.MOVING_AVG3
WHERE SEGMENT_ID = 0
ORDER BY ABS(DIFF_AMOUNT) DESC
;
