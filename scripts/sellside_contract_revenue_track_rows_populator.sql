-- USE SCHEMA BI.ALERTS;
USE SCHEMA BI_TEST.ALERTS;

--
-- create contract revenue track table
--
/*
CREATE TABLE SELLSIDE_CONTRACT_REVENUE_TRACKING (
	DATA_DATE DATE,
	PRODUCT_LINE_ID NUMBER(38,0),
	NETWORK_NAME_ID NUMBER(38,0),
	CONTRACT_ID NUMBER(38,0),
	REVENUE_AVG3 FLOAT,
	REVENUE_AVG7 FLOAT,
	REVENUE_REGR FLOAT,
	REVENUE_FORECAST FLOAT,
	REVENUE_ACTUAL FLOAT,
	DIFF_AMOUNT FLOAT,
	DIFF_PERCENTAGE FLOAT,
	REVENUE_FOUND_TIME TIMESTAMP_LTZ(9),
	ALERT_STATUS BOOLEAN,
	ALERT_ALLOWED BOOLEAN
);
*/
-- SELECT GET_DDL('TABLE', 'SELLSIDE_CONTRACT_REVENUE_TRACKING');

--
-- contract tracking rows population SP
--
-- DROP PROCEDURE SELLSIDE_CONTRACT_REVENUE_TRACK_ROWS_POPULATOR (FLOAT);
CREATE OR REPLACE PROCEDURE SELLSIDE_CONTRACT_REVENUE_TRACK_ROWS_POPULATOR (
	AMOUNT_THRESHOLD FLOAT 
  )
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
var AmountThreshold = AMOUNT_THRESHOLD ? AMOUNT_THRESHOLD : 100.;
var snowRet = '', snowSql = `
MERGE INTO SELLSIDE_CONTRACT_REVENUE_TRACKING D
USING (
  WITH SCOPED_DATA AS (
      SELECT DATA_TS DATA_DATE
        ,PRODUCT_LINE_ID
        ,NETWORK_NAME_ID
        ,CONTRACT_ID
        ,SUM(GROSS_REVENUE) REVENUE
      FROM BI.ACCOUNT_DATA.SELLSIDE_ACCOUNT_DATA_DAILY
      WHERE DATA_TS >= CURRENT_DATE()-30      -- scope to recent X days of data
      GROUP BY 1,2,3,4
      )
    ,FULL_MAP AS (
      SELECT *
      FROM (
          SELECT DATA_DATE
            ,DATEADD(DAY, -7, DATA_DATE) AVG7_BEGIN                    -- days for moving avg
            ,DATEADD(DAY, -3, DATA_DATE) AVG3_BEGIN                    -- days for moving avg
            ,DATEADD(DAY, -1, DATA_DATE) RANGE_END 
          FROM SCOPED_DATA
          WHERE DATA_DATE BETWEEN CURRENT_DATE()-21 AND CURRENT_DATE()   -- active scope: 3 weeks
          GROUP BY DATA_DATE
        ) D,
        (
          SELECT PRODUCT_LINE_ID
            ,NETWORK_NAME_ID
            ,CONTRACT_ID
          FROM SCOPED_DATA 
          --WHERE PRODUCT_LINE_ID > 0
          GROUP BY 1,2,3
        ) A
      )
    ,LOOK_BACK AS (
      SELECT A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.CONTRACT_ID
        ,CASE WHEN B.DATA_DATE = A.DATA_DATE THEN B.REVENUE ELSE NULL END BACK0_REVENUE
        ,CASE WHEN B.DATA_DATE BETWEEN AVG3_BEGIN AND RANGE_END THEN B.REVENUE ELSE NULL END BACK3_REVENUE
        ,CASE WHEN B.DATA_DATE BETWEEN AVG7_BEGIN AND RANGE_END THEN B.REVENUE ELSE NULL END BACK7_REVENUE
      FROM FULL_MAP A
      LEFT JOIN SCOPED_DATA B
      ON B.DATA_DATE BETWEEN A.AVG7_BEGIN AND A.DATA_DATE
        AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
        AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID
        AND A.CONTRACT_ID = B.CONTRACT_ID
      )
    ,MOVING_AVG AS (
      SELECT DATA_DATE
        ,PRODUCT_LINE_ID
        ,NETWORK_NAME_ID
        ,CONTRACT_ID
        --,DAYOFWEEK(DATA_DATE) DAY_OF_WEEK
        ,COUNT(BACK3_REVENUE) AVG3_NULLS
        ,COUNT(BACK7_REVENUE) AVG7_NULLS
        ,SUM(BACK0_REVENUE) REVENUE_ACTUAL
        ,COALESCE(SUM(BACK3_REVENUE)/NULLIF(COUNT(BACK3_REVENUE),0),0) REVENUE_AVG3
        ,COALESCE(SUM(BACK7_REVENUE)/NULLIF(COUNT(BACK7_REVENUE),0),0) REVENUE_AVG7
      FROM LOOK_BACK
      GROUP BY 1,2,3,4
      )
    ,LINEAR_REGR AS (
      SELECT A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.CONTRACT_ID
        ,DAYOFWEEK(A.DATA_DATE) DAY_OF_WEEK
        ,MAX(A.REVENUE_ACTUAL) REVENUE_ACTUAL
        ,MAX(A.REVENUE_AVG3) REVENUE_AVG3
        ,MAX(A.REVENUE_AVG7) REVENUE_AVG7
        ,REGR_INTERCEPT(B.REVENUE_AVG7, DATEDIFF(DAY,B.DATA_DATE,A.DATA_DATE)) REVENUE_REGR
      FROM MOVING_AVG A
      LEFT JOIN MOVING_AVG B
      ON B.DATA_DATE BETWEEN DATEADD(DAY,-7,A.DATA_DATE) AND DATEADD(DAY,-1,A.DATA_DATE)
        --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
        --AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID
        AND A.CONTRACT_ID = B.CONTRACT_ID
      GROUP BY 1,2,3,4
      )
    ,WEEKDAY_SUM AS (
      SELECT PRODUCT_LINE_ID
        ,NETWORK_NAME_ID
        ,CONTRACT_ID
        ,DAY_OF_WEEK
        ,SUM(REVENUE_ACTUAL) REVENUE_ACTUAL
        ,SUM(REVENUE_AVG7) REVENUE_AVG7
      FROM LINEAR_REGR
      GROUP BY 1,2,3,4
      )
    ,WEEKDAY_RATIO AS (
      SELECT PRODUCT_LINE_ID
        ,NETWORK_NAME_ID
        ,CONTRACT_ID
        ,DAY_OF_WEEK
        ,REVENUE_ACTUAL/NULLIF(REVENUE_AVG7,0) FINE_RATIO
        ,SUM(REVENUE_ACTUAL) OVER(PARTITION BY CONTRACT_ID) / NULLIF(SUM(REVENUE_AVG7) OVER(PARTITION BY CONTRACT_ID),0) ACC_RATIO
        ,SUM(REVENUE_ACTUAL) OVER(PARTITION BY DAY_OF_WEEK) / NULLIF(SUM(REVENUE_AVG7) OVER(PARTITION BY DAY_OF_WEEK),0) DAY_RATIO
      FROM WEEKDAY_SUM
      )
    ,REVISED_CAST AS (
      SELECT A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.CONTRACT_ID
        ,A.DAY_OF_WEEK
        ,A.REVENUE_AVG3
        ,A.REVENUE_AVG7
        ,A.REVENUE_REGR
        ,CASE WHEN B.ACC_RATIO BETWEEN .85 AND 1.15 THEN A.REVENUE_AVG7 ELSE A.REVENUE_AVG3 END -- Classfier-1: revenue runnng stable or trending up/down
            * COALESCE(CASE WHEN (B.ACC_RATIO BETWEEN .95 AND 1.05) AND (B.FINE_RATIO BETWEEN .7 AND 1.3) THEN B.FINE_RATIO ELSE B.DAY_RATIO END, 1) REVENUE_FORECAST -- Classfier-2: revenue just weekday senstive or random change in large range
        ,A.REVENUE_ACTUAL
      FROM LINEAR_REGR A
      JOIN WEEKDAY_RATIO B
      ON  A.DAY_OF_WEEK = B.DAY_OF_WEEK
      AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID      
      AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID      
      AND A.CONTRACT_ID = B.CONTRACT_ID      
      WHERE A.DATA_DATE BETWEEN CURRENT_DATE()-7 AND CURRENT_DATE() 
      )
  SELECT DATA_DATE
      ,PRODUCT_LINE_ID
      ,NETWORK_NAME_ID
      ,CONTRACT_ID
      ,ROUND(REVENUE_AVG3, 2) REVENUE_AVG3
      ,ROUND(REVENUE_AVG7, 2) REVENUE_AVG7
      ,ROUND(REVENUE_REGR, 2) REVENUE_REGR
      ,ROUND(REVENUE_FORECAST, 2) REVENUE_FORECAST
      ,ROUND(REVENUE_ACTUAL, 2) REVENUE_ACTUAL
      ,ROUND(REVENUE_ACTUAL - REVENUE_FORECAST, 2) DIFF_AMOUNT
      ,ROUND(100*((REVENUE_ACTUAL - REVENUE_FORECAST)/NULLIF(REVENUE_FORECAST,0)),2) DIFF_PERCENTAGE
      ,CASE WHEN REVENUE_ACTUAL > 0 THEN CURRENT_TIMESTAMP ELSE NULL END REVENUE_FOUND_TIME
      ,CASE WHEN (REVENUE_AVG7 > :1) AND COALESCE(REVENUE_ACTUAL, 0) = 0 THEN 1 
        ELSE 0 END::BOOLEAN ALERT_TRIGGER
      ,True ALERT_ALLOWED
  FROM REVISED_CAST
  WHERE (REVENUE_AVG7 > 0 AND DATA_DATE = CURRENT_DATE()-1)
  ) S
ON D.DATA_DATE = S.DATA_DATE
  AND D.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
  AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.CONTRACT_ID = S.CONTRACT_ID
WHEN MATCHED THEN UPDATE SET
    REVENUE_AVG3 = S.REVENUE_AVG3
    ,REVENUE_AVG7 = S.REVENUE_AVG7
    ,REVENUE_REGR = S.REVENUE_REGR
    ,REVENUE_FORECAST = S.REVENUE_FORECAST
    ,REVENUE_ACTUAL = S.REVENUE_ACTUAL
    ,DIFF_AMOUNT = S.DIFF_AMOUNT
    ,DIFF_PERCENTAGE = S.DIFF_PERCENTAGE
    ,REVENUE_FOUND_TIME = CASE WHEN ((D.REVENUE_FOUND_TIME IS NULL) != (S.REVENUE_FOUND_TIME IS NULL)) THEN S.REVENUE_FOUND_TIME ELSE D.REVENUE_FOUND_TIME END
    ,ALERT_STATUS = S.ALERT_TRIGGER AND D.ALERT_ALLOWED AND COALESCE(D.ALERT_STATUS, S.REVENUE_FOUND_TIME IS NOT NULL) OR (D.ALERT_STATUS AND S.REVENUE_FOUND_TIME IS NULL) 
WHEN NOT MATCHED THEN INSERT (
    DATA_DATE
    ,PRODUCT_LINE_ID
    ,NETWORK_NAME_ID
    ,CONTRACT_ID
    ,REVENUE_AVG3
    ,REVENUE_AVG7
    ,REVENUE_REGR
    ,REVENUE_FORECAST
    ,REVENUE_ACTUAL  
    ,DIFF_AMOUNT
    ,DIFF_PERCENTAGE
    ,REVENUE_FOUND_TIME
    ,ALERT_STATUS
    ,ALERT_ALLOWED
    )
  VALUES (
    S.DATA_DATE
    ,S.PRODUCT_LINE_ID
    ,S.NETWORK_NAME_ID
    ,S.CONTRACT_ID
    ,S.REVENUE_AVG3
    ,S.REVENUE_AVG7
    ,S.REVENUE_REGR
    ,S.REVENUE_FORECAST
    ,S.REVENUE_ACTUAL  
    ,S.DIFF_AMOUNT
    ,S.DIFF_PERCENTAGE
    ,S.REVENUE_FOUND_TIME
    ,S.ALERT_TRIGGER
    ,S.ALERT_ALLOWED
    )
;`;

try {
  snowRet = snowflake.execute({ 
      sqlText: snowSql,
      binds: [ AmountThreshold ]
      });
  snowRet = snowSql.replace(/:1/g, AMOUNT_THRESHOLD);
  }
catch (err) {
  snowRet = "Failure: " + err
  }
finally {
  return snowRet.toString()
  }
$$
;

-- CALL ALERTS.SELLSIDE_CONTRACT_REVENUE_TRACK_ROWS_POPULATOR (100);
