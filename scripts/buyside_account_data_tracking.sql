USE DATABASE BI;
USE SCHEMA ALERTS;
--
-- Add a control control column on ACCOUNT_METADATA_MAPPINGS table
--
--Note: Column is added already, so skip this query
--ALTER TABLE BI.COMMON.ACCOUNT_METADATA_MAPPINGS
--ADD MISSING_SPEND_TRACKING_EXEMPTED BOOLEAN DEFAULT False;

--
-- Create a buyside account data tracking table 
--
CREATE OR REPLACE TABLE BUYSIDE_ACCOUNT_DATA_TRACKING
(
    DATA_DATE           DATE
    --,PRODUCT_LINE_ID     NUMBER
    --,NETWORK_NAME_ID     NUMBER
    ,BI_ACCOUNT_ID       NUMBER
    ,SPEND_AVG3          FLOAT COMMENT 'Last 3 preceding days average'
    ,SPEND_AVG7          FLOAT COMMENT 'Last 7 preceding days average'
    ,SPEND_REGR          FLOAT COMMENT 'Linear regression on last 7 preceding days average'
    ,SPEND_FORECAST      FLOAT COMMENT 'Weekly cycle revised linear regression on last 7 preceding days average'
    ,SPEND_ACTUAL        FLOAT COMMENT 'Acutal loaded spend'
    ,DIFF_AMOUNT         FLOAT COMMENT 'Difference $ amount between forecast and acutal loaded spend'
    ,DIFF_PERCENTAGE     FLOAT COMMENT 'Difference percentage of difference over forecast'
    ,SPEND_FOUND_TIME       TIMESTAMP_NTZ COMMENT 'Timestamp of the spend found'
    ,ALERT_STATUS        BOOLEAN COMMENT 'Alter status: true-seems missing; false-looks good'
    ,ALERT_ALLOWED       BOOLEAN COMMENT 'Prohitbit the alert re-generating on current account of the date'
)
COMMENT = 'This table is used for buyside account data incomplete detection'
;

--
-- Check the existing task names in case overwrite it accidently
-- 
SHOW TASKS;

--
-- For update the task, suspend it if exists
--
ALTER TASK IF EXISTS POPULATE_BUYSIDE_ACCOUNT_DATA_TRACKING SUSPEND;


--
-- Setup a task to append the data daily at 8:45am PST
--
CREATE OR REPLACE TASK POPULATE_BUYSIDE_ACCOUNT_DATA_TRACKING
    WAREHOUSE = S1_BI
    SCHEDULE = 'USING CRON 40 5-18 * * * America/Los_Angeles'
AS
MERGE INTO BUYSIDE_ACCOUNT_DATA_TRACKING D
USING (
  WITH SCOPED_DATA AS (
      SELECT A.DATA_DATE
        --,A.PRODUCT_LINE_ID
        --,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        ,SUM(A.SPEND) SPEND
      FROM BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION A
      JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS B
      ON A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID
      WHERE A.DATA_DATE >= CURRENT_DATE()-30      -- scope to recent X days of data
      AND B.MISSING_SPEND_TRACKING_EXEMPTED != 1  -- exclude the exempted accounts
      GROUP BY 1,2--,3,4
      )
    ,FULL_MAP AS (
      SELECT *
      FROM (
          SELECT DATA_DATE
            ,DATEADD(DAY, -7, DATA_DATE) AVG7_BEGIN                    -- days for moving avg
            ,DATEADD(DAY, -3, DATA_DATE) AVG3_BEGIN                    -- days for moving avg
            ,DATEADD(DAY, -1, DATA_DATE) RANGE_END 
          FROM SCOPED_DATA
          WHERE DATA_DATE BETWEEN CURRENT_DATE()-21 AND CURRENT_DATE()   -- active scope: 3 weeks
          GROUP BY DATA_DATE
        ) D,
        (
          SELECT BI_ACCOUNT_ID 
              --,PRODUCT_LINE_ID
              --,NETWORK_NAME_ID
          FROM SCOPED_DATA 
          --WHERE PRODUCT_LINE_ID > 0
          GROUP BY 1--,2,3
        ) A
      )
    ,LOOK_BACK AS (
      SELECT A.DATA_DATE
        --,A.PRODUCT_LINE_ID
        --,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        ,CASE WHEN B.DATA_DATE = A.DATA_DATE THEN B.SPEND ELSE NULL END BACK0_SPEND
        ,CASE WHEN B.DATA_DATE BETWEEN AVG3_BEGIN AND RANGE_END THEN B.SPEND ELSE NULL END BACK3_SPEND
        ,CASE WHEN B.DATA_DATE BETWEEN AVG7_BEGIN AND RANGE_END THEN B.SPEND ELSE NULL END BACK7_SPEND
      FROM FULL_MAP A
      LEFT JOIN SCOPED_DATA B
      ON B.DATA_DATE BETWEEN A.AVG7_BEGIN AND A.DATA_DATE
        --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
        --AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID
        AND A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID
      )
    ,MOVING_AVG AS (
      SELECT DATA_DATE
        --,PRODUCT_LINE_ID
        --,NETWORK_NAME_ID
        ,BI_ACCOUNT_ID
        --,DAYOFWEEK(DATA_DATE) DAY_OF_WEEK
        ,COUNT(BACK3_SPEND) AVG3_NULLS
        ,COUNT(BACK7_SPEND) AVG7_NULLS
        ,SUM(BACK0_SPEND) SPEND_ACTUAL
        ,COALESCE(SUM(BACK3_SPEND)/NULLIF(COUNT(BACK3_SPEND),0),0) SPEND_AVG3
        ,COALESCE(SUM(BACK7_SPEND)/NULLIF(COUNT(BACK7_SPEND),0),0) SPEND_AVG7
      FROM LOOK_BACK
      GROUP BY 1,2--,3,4
      )
    ,LINEAR_REGR AS (
      SELECT A.DATA_DATE
        --,A.PRODUCT_LINE_ID
        --,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        ,DAYOFWEEK(A.DATA_DATE) DAY_OF_WEEK
        ,MAX(A.SPEND_ACTUAL) SPEND_ACTUAL
        ,MAX(A.SPEND_AVG3) SPEND_AVG3
        ,MAX(A.SPEND_AVG7) SPEND_AVG7
        ,REGR_INTERCEPT(B.SPEND_AVG7, DATEDIFF(DAY,B.DATA_DATE,A.DATA_DATE)) SPEND_REGR
      FROM MOVING_AVG A
      LEFT JOIN MOVING_AVG B
      ON B.DATA_DATE BETWEEN DATEADD(DAY,-7,A.DATA_DATE) AND DATEADD(DAY,-1,A.DATA_DATE)
        --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
        --AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID
        AND A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID
      GROUP BY 1,2--,3,4
      )
    ,ACC_DAY_SUM AS (
      SELECT BI_ACCOUNT_ID
        ,DAY_OF_WEEK
        ,SUM(SPEND_ACTUAL) SPEND_ACTUAL
        ,SUM(SPEND_AVG7) SPEND_AVG7
      FROM LINEAR_REGR
      GROUP BY 1,2
      )
    ,WEEKDAY_RATIO AS (
      SELECT BI_ACCOUNT_ID
        ,DAY_OF_WEEK
        ,SPEND_ACTUAL/NULLIF(SPEND_AVG7,0) FINE_RATIO
        ,SUM(SPEND_ACTUAL) OVER(PARTITION BY BI_ACCOUNT_ID) / NULLIF(SUM(SPEND_AVG7) OVER(PARTITION BY BI_ACCOUNT_ID),0) ACC_RATIO
        ,SUM(SPEND_ACTUAL) OVER(PARTITION BY DAY_OF_WEEK) / NULLIF(SUM(SPEND_AVG7) OVER(PARTITION BY DAY_OF_WEEK),0) DAY_RATIO
      FROM ACC_DAY_SUM
      )
    ,REVISED_CAST AS (
      SELECT A.DATA_DATE
        --,A.PRODUCT_LINE_ID
        --,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        ,A.DAY_OF_WEEK
        ,A.SPEND_AVG3
        ,A.SPEND_AVG7
        ,A.SPEND_REGR
        ,CASE WHEN B.ACC_RATIO BETWEEN .85 AND 1.15 THEN A.SPEND_AVG7 ELSE A.SPEND_AVG3 END -- Classfier-1: account runnng stable or trending up/down
            * COALESCE(CASE WHEN (B.ACC_RATIO BETWEEN .95 AND 1.05) AND (B.FINE_RATIO BETWEEN .7 AND 1.3) THEN B.FINE_RATIO ELSE B.DAY_RATIO END, 1) SPEND_FORECAST -- Classfier-2: account just weekday senstive or huge shaking
        ,A.SPEND_ACTUAL
      FROM LINEAR_REGR A
      JOIN WEEKDAY_RATIO B
      ON  A.DAY_OF_WEEK = B.DAY_OF_WEEK
      --AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID      
      --AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID      
      AND A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID      
      WHERE A.DATA_DATE BETWEEN CURRENT_DATE()-7 AND CURRENT_DATE() 
      )
  SELECT DATA_DATE
      --,PRODUCT_LINE_ID
      --,NETWORK_NAME_ID
      ,BI_ACCOUNT_ID
      ,ROUND(SPEND_AVG3, 2) SPEND_AVG3
      ,ROUND(SPEND_AVG7, 2) SPEND_AVG7
      ,ROUND(SPEND_REGR, 2) SPEND_REGR
      ,ROUND(SPEND_FORECAST, 2) SPEND_FORECAST
      ,ROUND(SPEND_ACTUAL, 2) SPEND_ACTUAL
      ,ROUND(SPEND_ACTUAL - SPEND_FORECAST, 2) DIFF_AMOUNT
      ,ROUND(100*((SPEND_ACTUAL - SPEND_FORECAST)/NULLIF(SPEND_FORECAST,0)),2) DIFF_PERCENTAGE
      ,CASE WHEN SPEND_ACTUAL > 0 THEN CURRENT_TIMESTAMP ELSE NULL END SPEND_FOUND_TIME
      ,CASE WHEN (SPEND_AVG3 > 500.) AND (SPEND_FORECAST - SPEND_ACTUAL > 300.) AND (SPEND_FORECAST - SPEND_ACTUAL)/NULLIF(SPEND_FORECAST,0) > .5 THEN 1 ELSE 0 END::BOOLEAN ALERT_STATUS
      ,True ALERT_ALLOWED
  FROM REVISED_CAST
  WHERE (SPEND_AVG7 > 0 AND DATA_DATE < CURRENT_DATE())
    OR (SPEND_ACTUAL > 0 AND DATA_DATE = CURRENT_DATE())
  ) S
ON D.DATA_DATE = S.DATA_DATE
  --AND D.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
  --AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.BI_ACCOUNT_ID = S.BI_ACCOUNT_ID
WHEN MATCHED THEN UPDATE SET
    SPEND_AVG3 = S.SPEND_AVG3
    ,SPEND_AVG7 = S.SPEND_AVG7
    ,SPEND_REGR = S.SPEND_REGR
    ,SPEND_FORECAST = S.SPEND_FORECAST
    ,SPEND_ACTUAL = S.SPEND_ACTUAL
    ,DIFF_AMOUNT = S.DIFF_AMOUNT
    ,DIFF_PERCENTAGE = S.DIFF_PERCENTAGE
    ,SPEND_FOUND_TIME = CASE WHEN ((D.SPEND_FOUND_TIME IS NULL) != (S.SPEND_FOUND_TIME IS NULL)) THEN S.SPEND_FOUND_TIME ELSE D.SPEND_FOUND_TIME END
    ,ALERT_STATUS = S.ALERT_STATUS AND D.ALERT_ALLOWED
WHEN NOT MATCHED THEN INSERT (
    DATA_DATE
    --,PRODUCT_LINE_ID
    --,NETWORK_NAME_ID
    ,BI_ACCOUNT_ID
    ,SPEND_AVG3
    ,SPEND_AVG7
    ,SPEND_REGR
    ,SPEND_FORECAST
    ,SPEND_ACTUAL  
    ,DIFF_AMOUNT
    ,DIFF_PERCENTAGE
    ,SPEND_FOUND_TIME
    ,ALERT_STATUS
    ,ALERT_ALLOWED
    )
  VALUES (
    S.DATA_DATE
    --,S.PRODUCT_LINE_ID
    --,S.NETWORK_NAME_ID
    ,S.BI_ACCOUNT_ID
    ,S.SPEND_AVG3
    ,S.SPEND_AVG7
    ,S.SPEND_REGR
    ,S.SPEND_FORECAST
    ,S.SPEND_ACTUAL  
    ,S.DIFF_AMOUNT
    ,S.DIFF_PERCENTAGE
    ,S.SPEND_FOUND_TIME
    ,S.ALERT_STATUS
    ,S.ALERT_ALLOWED
    )
;

--
-- Enable the task schedule
--
ALTER TASK IF EXISTS POPULATE_BUYSIDE_ACCOUNT_DATA_TRACKING RESUME;

--
-- Check task "state" is set "started", then all done!
--
SHOW TASKS;

--
-- Check yesterday's alert status
--
SELECT *
FROM BI.ALERTS.BUYSIDE_ACCOUNT_DATA_TRACKING
WHERE DATA_DATE = CURRENT_DATE()-1
AND ALERT_STATUS = 1;
