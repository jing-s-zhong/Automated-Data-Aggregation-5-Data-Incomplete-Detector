--
-- Check the existing task names in case overwrite it accidently
--
SHOW TASKS;

--
-- For update the task, suspend it if exists
--
ALTER TASK IF EXISTS POPULATE_BUYSIDE_ACCOUNT_DATA_MISSING_DETECTION SUSPEND;

--
-- Setup a task to append the data daily at 8:45am PST
--
CREATE OR REPLACE TASK POPULATE_BUYSIDE_ACCOUNT_DATA_MISSING_DETECTION
    WAREHOUSE = S1_BI
    SCHEDULE = 'USING CRON 40 5-18 * * * America/Los_Angeles'
AS
MERGE INTO BUYSIDE_ACCOUNT_DATA_INCOMPLETE_DETECTITON D
USING (
  WITH SCOPED_DATA AS (
    SELECT A.DATA_DATE
      ,A.PRODUCT_LINE_ID
      ,A.NETWORK_NAME_ID
      ,A.BI_ACCOUNT_ID
      ,SUM(A.SPEND) SPEND
    FROM BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION A
    JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS B
    ON A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID
    WHERE A.DATA_DATE >= CURRENT_DATE()-16      -- scope to recent X days of data
    AND B.MISSING_SPEND_TRACKING_EXEMPTED != 1  -- exclude the exempted accounts
    GROUP BY A.DATA_DATE
      ,A.PRODUCT_LINE_ID
      ,A.NETWORK_NAME_ID
      ,A.BI_ACCOUNT_ID
      )
    ,FULL_MAP AS (
      SELECT *
      FROM (
          SELECT DATA_DATE
            ,DATEADD(DAY, -3, DATA_DATE) RANGE_BEGIN -- range for moving 3 day's avg
            ,DATEADD(DAY, -1, DATA_DATE) RANGE_END 
          FROM SCOPED_DATA
          WHERE DATA_DATE BETWEEN CURRENT_DATE()-7 AND CURRENT_DATE() -- refresh one week of predictions
          GROUP BY DATA_DATE
        ) D,
        (
          SELECT PRODUCT_LINE_ID
              ,NETWORK_NAME_ID
              ,BI_ACCOUNT_ID 
          FROM SCOPED_DATA 
          GROUP BY PRODUCT_LINE_ID
              ,NETWORK_NAME_ID
              ,BI_ACCOUNT_ID
        ) A
      )
    ,MOVING_AVG AS (
      SELECT A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        ,COUNT(*) RANGED_ROWS
        ,COUNT(B.SPEND) NOT_NULLS
        ,COALESCE(SUM(B.SPEND)/NULLIF(COUNT(B.SPEND),0),0) SPEND_FORECAST
      FROM FULL_MAP A
      LEFT JOIN SCOPED_DATA B
      ON B.DATA_DATE BETWEEN A.RANGE_BEGIN AND A.RANGE_END
        AND A.PRODUCT_LINE_ID = B.PRODUCT_LINE_ID
        AND A.NETWORK_NAME_ID = B.NETWORK_NAME_ID
        AND A.BI_ACCOUNT_ID = B.BI_ACCOUNT_ID
      GROUP BY A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
      )
    ,COMPARISON AS (
      SELECT A.DATA_DATE
        ,A.PRODUCT_LINE_ID
        ,A.NETWORK_NAME_ID
        ,A.BI_ACCOUNT_ID
        --,A.RANGED_ROWS
        --,A.NOT_NULLS
        ,ROUND(A.SPEND_FORECAST,2) SPEND_FORECAST
        ,COALESCE(C.SPEND,0) SPEND_ACTUAL
      FROM MOVING_AVG A
      LEFT JOIN SCOPED_DATA C
      ON A.DATA_DATE = C.DATA_DATE
        AND A.PRODUCT_LINE_ID = C.PRODUCT_LINE_ID
        AND A.NETWORK_NAME_ID = C.NETWORK_NAME_ID
        AND A.BI_ACCOUNT_ID = C.BI_ACCOUNT_ID
      )
  SELECT DATA_DATE
      ,PRODUCT_LINE_ID
      ,NETWORK_NAME_ID
      ,BI_ACCOUNT_ID
      ,SPEND_FORECAST
      ,SPEND_ACTUAL  
      ,ROUND(SPEND_ACTUAL - SPEND_FORECAST, 2) DIFF_AMOUNT
      ,ROUND(100*((SPEND_ACTUAL - SPEND_FORECAST)/NULLIF(SPEND_FORECAST,0)),2) DIFF_PERCENTAGE
      ,CASE WHEN (SPEND_FORECAST - SPEND_ACTUAL > 100.) AND (SPEND_FORECAST - SPEND_ACTUAL)/NULLIF(SPEND_FORECAST,0) > .25 THEN 1 ELSE 0 END::BOOLEAN ALERT_STATUS
  FROM COMPARISON
  ) S
ON D.DATA_DATE = S.DATA_DATE
  AND D.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
  AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.BI_ACCOUNT_ID = S.BI_ACCOUNT_ID
WHEN MATCHED THEN UPDATE SET
    SPEND_FORECAST = S.SPEND_FORECAST
    ,SPEND_ACTUAL = S.SPEND_ACTUAL
    ,DIFF_AMOUNT = S.DIFF_AMOUNT
    ,DIFF_PERCENTAGE = S.DIFF_PERCENTAGE
    ,ALERT_STATUS = S.ALERT_STATUS
WHEN NOT MATCHED THEN INSERT (
    DATA_DATE
    ,PRODUCT_LINE_ID
    ,NETWORK_NAME_ID
    ,BI_ACCOUNT_ID
    ,SPEND_FORECAST
    ,SPEND_ACTUAL  
    ,DIFF_AMOUNT
    ,DIFF_PERCENTAGE
    ,ALERT_STATUS
    )
  VALUES (
    S.DATA_DATE
    ,S.PRODUCT_LINE_ID
    ,S.NETWORK_NAME_ID
    ,S.BI_ACCOUNT_ID
    ,S.SPEND_FORECAST
    ,S.SPEND_ACTUAL  
    ,S.DIFF_AMOUNT
    ,S.DIFF_PERCENTAGE
    ,S.ALERT_STATUS
    )
;

--
-- Enable the task schedule
--
ALTER TASK IF EXISTS POPULATE_BUYSIDE_ACCOUNT_DATA_MISSING_DETECTION RESUME;

--
-- Check task "state" is set "started", then all done!
--
SHOW TASKS;
